// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Student {
  id         Int           @id @default(autoincrement())
  name       String
  lastName1  String
  lastName2  String?
  status     StatusStudent
  commentary String? //Comentario opcional sobre el estudiante posterior a su entrevista
  dateBirth  String
  housePhone String
  address    String
  
  //Relacion 1:N con Tutor
  tutors     Tutor[] //Persona autorizada (Tutor) para buscar el niño

  //Relacion 1:N con Contacto de emergencia
  emergencyContacts EmergencyContact[]

  medicalCondition String? //Alergia, intolerancia, condición o enfermedad 

  //Relación 1:N con Pediatrician
  idPediatrician Int
  pediatrician   Pediatrician @relation(fields: [idPediatrician], references: [id])

  //Relacion de 1:N con Family
  idFamily Int?
  family   Family? @relation(fields: [idFamily], references: [id])

  progressDesired String?

  allowedPictures Boolean?

  //Relacion 1:N con City
  city   City @relation(fields: [idCity], references: [id])
  idCity Int

  //Relacion 1:N con Parent
  parent   Parent @relation(fields: [idParent], references: [id])
  idParent Int

  //Relacion 1:N con Program
  idProgram Int
  program   Program @relation(fields: [idProgram], references: [id])

  //Relacion N:M con Group
  groups StudentOnGroup[]

  //Relacion 1:N Con Evaluation
  evaluations Evaluation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Parent {
  id           Int     @id @default(autoincrement())
  identityCard String  @unique
  name         String
  lastName1    String
  lastName2    String?
  telephone    String?
  email        String  @unique
  occupation   String?

  verified     Boolean @default(true)

  //Relacion 1:N con Student
  children Student[]

  //Relacion 1:N con Payment
  payments Payment[]

  //Relacion de 1:N con Family
  idFamily Int?
  family   Family? @relation(fields: [idFamily], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Family {
  id       Int       @id @default(autoincrement())
  name     String

  //Relacion 1:N con Student
  students Student[]
  //Relación 1:N con Parent
  parents  Parent[]
  //Relacion 1:1 con user
  user     User?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Tutor {
  id         Int     @id @default(autoincrement())
  name       String
  occupation String?
  phone      String

  //Relacion de 1:N con estudiante
  idStudent Int
  student   Student @relation(fields: [idStudent], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model EmergencyContact {
  id    Int    @id @default(autoincrement())
  name  String
  phone String

  //Relacion de 1:N con estudiante
  idStudent Int
  student   Student @relation(fields: [idStudent], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Pediatrician {
  id                 Int    @id @default(autoincrement())
  name               String
  medicalInstitution String
  officeNumber       String
  phone              String

  //Relacion de 1:N con estudiante
  students Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Payment {
  id        Int     @id @default(autoincrement())
  date      String
  amount    Float
  //Relacion 1:N con Parent
  parent    Parent  @relation(fields: [idParent], references: [id])
  idParent  Int
  //Relacion 1:N con Invoice
  invoice   Invoice @relation(fields: [idInvoice], references: [id])
  idInvoice Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Product {
  id        Int     @id @default(autoincrement())
  name      String
  price     Float
  cost      Float
  available Boolean
  status    String

  //Relacion 1:1 con DetalleSale
  detailSale DetailSale?

  //Relacion 1:1 con DetailOrder
  detailOrder DetailOrder?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Invoice {
  id     Int    @id @default(autoincrement())
  date   String
  amount Float
  status String

  //Relacion 1:N con Payment
  payments Payment[]

  //Relacion 1:N con Camp
  camp   Camp @relation(fields: [idCamp], references: [id])
  idCamp Int

  //Relacion 1:1 con Sale
  sale   Sale @relation(fields: [idSale], references: [id])
  idSale Int  @unique

  //Relacion 1:1 con Order
  order   Order @relation(fields: [idOrder], references: [id])
  idOrder Int   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Sale {
  id    Int    @id @default(autoincrement())
  date  String
  total Float

  //Relacion 1:1 con Invoice
  invoice Invoice? //Verificar 

  //Relacion 1:N con DetailSale
  detailSales DetailSale[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model DetailSale {
  id           Int   @id @default(autoincrement())
  quantity     Int
  unitaryPrice Float

  //Relacion 1:1 con Product
  product   Product @relation(fields: [idProduct], references: [id])
  idProduct Int     @unique

  //Relacion 1:N con Sale
  sale   Sale @relation(fields: [idSale], references: [id])
  idSale Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Order {
  id     Int     @id @default(autoincrement())
  date   String
  total  Float
  status Boolean

  //Relacion 1:1 Invoice
  invoice Invoice?

  //Relacion 1:N DetailOrder
  detailOrders DetailOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model DetailOrder {
  id       Int @id @default(autoincrement())
  quantity Int

  //Relacion 1:N Order
  order   Order @relation(fields: [idOrder], references: [id])
  idOrder Int

  //Relacion 1:1 con Product
  product   Product @relation(fields: [idProduct], references: [id])
  idProduct Int     @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Program {
  id            Int    @id @default(autoincrement())
  description   String
  maxStudents   Int
  inscription   Float
  monthlyAmount Float
  status        Boolean @default(true)

  //Relacion 1:N con Student
  students Student[]

  //Relacion 1:N con Objectives
  objectives Objectives[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Objectives {
  id    Int    @id @default(autoincrement())
  title String
  mark  String

  //Relacion 1:N con Program
  program   Program @relation(fields: [idProgram], references: [id])
  idProgram Int

  //Relacion 1:N con Evaluation
  evaluation   Evaluation @relation(fields: [idEvaluation], references: [id])
  idEvaluation Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Evaluation {
  id       Int     @id @default(autoincrement())
  date     String
  commment String?

  //Relacion 1:N con Objectives
  objectives Objectives[]

  //Relacion 1:N con Student
  idStudent Int
  student   Student @relation(fields: [idStudent], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Staff {
  id            Int     @id @default(autoincrement())
  name          String
  lastName1     String
  lastName2     String?
  phone         String
  salary        Float
  position      String
  address       String

  email       String  @unique
  dateBirth   String
  dateStart   String // Fecha de entrada a la empresa
  dateFinish  String? // Fecha de salida del empleado
  status      Boolean // Activo o No
  cedula      String @unique

  // Detalles Bancarios
  bankAccount String
  AccountType String
  currency    String
  bankRoute   String

  //Relacion 1:N Ciudad
  city   City @relation(fields: [idCity], references: [id])
  idCity Int

  //Relacion 1:N con Shift
  shifts Shift[]

  //Relación 1:1 con Professor
  professor Professor?

  //Relación N:M con Nomina
  DetailNomina DetailNomina[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deleted      Boolean        @default(false)
}

model Nomina {
  id           Int            @id @default(autoincrement())
  date         String
  type         String // Si es del dia 15 o del 30 (quincenal o mensual)

  DetailNomina DetailNomina[]

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deleted      Boolean        @default(false)
}

model DetailNomina {
  idNomina     Int
  nomina       Nomina @relation(fields: [idNomina], references: [id])
  idStaff      Int
  staff        Staff  @relation(fields: [idStaff], references: [id])

  date        String

  // Datos
  salary       Float
  extraDays    Int    // Numeros de dias extra trabajados
  overtimePay  Float  // Lo ganado por trabajar dias extras ( [salario/23.83] * dias )
  sfs          Float  // Seguro Familiar de Salud (3.04% de salario)
  afp          Float  // Fondo de Pensión (2.78% de salario)
  loans        Float  // Prestamos
  other        Float
  total        Float

  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deleted      Boolean        @default(false)

  @@id([idNomina, idStaff])
}

model Professor {
  id               Int    @id @default(autoincrement())
  academicCategory String

  idStaff Int   @unique
  staff   Staff @relation(fields: [idStaff], references: [id])

  groups ProfessorsForGroup[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  name      String
  lastName1 String
  lastName2 String?
  password  String
  email     String   @unique
  phone     String
  role      UserRole

  //Si el UserRole es USER, se vinculará a una familia
  //Relacion 1:1 con Family
  idFamily Int?    @unique
  family   Family? @relation(fields: [idFamily], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model City {
  id   Int    @id @default(autoincrement())
  name String

  //Relacion 1:N con Staff
  staffs Staff[]

  //Relacion 1:N con Student
  students Student[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Shift {
  id          Int    @id @default(autoincrement())
  initialHour String
  finishHour  String

  //Relacion 1:N con Staff
  staff   Staff @relation(fields: [idStaff], references: [id])
  idStaff Int

  //Relacion 1:N con Group
  groups Group[]

  //Relacion 1:N con AcademicYear
  academicYear   AcademicYear @relation(fields: [idAcademicYear], references: [id])
  idAcademicYear Int

  //Relacion 1:N con WeekDay
  weekDay   WeekDay @relation(fields: [idWeekDay], references: [id])
  idWeekDay Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model WeekDay {
  id   Int    @id @default(autoincrement())
  name String

  //Relacion 1:N con Shift
  shifts Shift[]
}

model Group {
  id          Int @id @default(autoincrement())
  maxStudents Int

  //Relacion N:M con Professor
  professor ProfessorsForGroup[]

  //Relacion 1:N con Shift
  shift   Shift @relation(fields: [idShift], references: [id])
  idShift Int

  //Relacion M:N con Student 
  students StudentOnGroup[]

  //Relacion M:N con Camp
  camps GroupOnCamp[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

//Relacion N:M de Professor con Group
model ProfessorsForGroup {
  idProfessor Int
  professor   Professor @relation(fields: [idProfessor], references: [id])
  idGroup     Int
  group       Group     @relation(fields: [idGroup], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deleted    Boolean  @default(false)
  assignedBy String?

  @@id([idProfessor, idGroup])
}

//Relacion N:M de Student con Group
model StudentOnGroup {
  student   Student @relation(fields: [idStudent], references: [id])
  idStudent Int
  group     Group   @relation(fields: [idGroup], references: [id])
  idGroup   Int

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deleted    Boolean  @default(false)
  assignedBy String?

  //Primary key conjunta
  @@id([idStudent, idGroup])
}

//Relacion N:M de Camp con Group
model GroupOnCamp {
  camp    Camp  @relation(fields: [idCamp], references: [id])
  idCamp  Int
  group   Group @relation(fields: [idGroup], references: [id])
  idGroup Int

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  deleted    Boolean  @default(false)
  assignedBy String?

  //Primary key conjunta
  @@id([idCamp, idGroup])
}

model AcademicYear {
  id        Int    @id @default(autoincrement())
  startTime String
  endTime   String

  //Relacion 1:N con Shift
  shifts Shift[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

//Modelos relacionados a campamento:
model Camp {
  id          Int    @id @default(autoincrement())
  name        String //Nombre campamento
  entryFee    Float
  capacity    Int?
  description String

  // Fechas
  startDate String
  endDate   String

  //Relacion 1:N con Activity
  activities Activity[]

  //Relacion 1:N con invoices
  invoices Invoice[]

  //Relacion N:M con Group
  groups GroupOnCamp[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

model Activity {
  id          Int    @id @default(autoincrement())
  startTime   String
  endTime     String
  day         String
  description String

  //Relacion 1:N con Camp
  camp   Camp @relation(fields: [idCamp], references: [id])
  idCamp Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

// KEYS AUTH API 
model AuthKey {
  id    Int     @id @default(autoincrement())
  key   String  @unique
  owner String?

  createdAt DateTime @default(now())
  deleted   Boolean  @default(false)
}

model Receipt {
  id          Int     @id @default(autoincrement())
  date        String
  nameFrom    String
  amount      Float
  textAmount  String
  concept     String
  method      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  deleted   Boolean  @default(false)
}

enum UserRole {
  SUPERADMIN
  ADMIN
  USER //Usuario de las Familias
  ACCOUNTANT
  PROFESSOR
}

enum StatusStudent {
  PENDING_CHECK
  ENROLLED
  REJECTED
  WAITLISTED
  ACCEPTED_NOT_ENROLLED //Aceptado pero no inscrito
}
